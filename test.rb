#変数の宣言と代入
# 変数名 = 式や値 宣言と代入を同時に行う

str = "Hello"
int = 123 * 2

p str
p int

#変数名は小文字のスネークケースで書く
#スネークケースとは単語を_で区切る記法　⇔ キャメルケース 単語を大文字で区切る記法
# 同時に変数に代入することもできる(多重代入)

a,b = 5,6
p a
p b

# ""で囲むと改行が反映され、式展開が利用できる。''で囲むと改行が反映されない

puts "ダブルクオートで囲った文字です。\n 改行です"
puts 'シングルクオートで囲った文字です。 \n 改行です'
puts "式展開の例。 #{a}"

# 文字列の比較
# 文字列が等しいかどうかを比較するには == を、異なるかどうかは != を利用して比較する

p "Ruby" == "Ruby"
p "Ruby" != "Ruby"
c = 10
d = 10
p c == d
p c != d

# 大小関係の比較には　<,<=,>,>=を利用する。文字列の場合はバイト値が比較基準となり、bytesメソッドでバイト値を確認できる

p "a".bytes
p "b".bytes
p "a" < "b"

#数値には_を含めることができ、_は無視されるため区切る文字として利用できる

e = 100_000_000
p e

# 四則演算は + - / *を利用する。あまりを求める場合は % を利用する

p 10 + 5
p 10 - 5
p 10 / 5
p 10 * 5
p 10 % 5
p 10 % 3

# 整数同士の割り算は整数となり、小数点以下は切り捨てられてしまう。どちらかの値に.0をつけることで小数点以下も算出可能。また変数に整数が入力されている場合はto_fメソッドで少数に変更可能

p 1 / 2
p 1.0 / 2
f = 1
p f.to_f / 2

# **を利用することでべき乗を求めることも可能

p 2 ** 10